# PEERSIM CHORD

# random.seed 1234567890
simulation.endtime 10^6
simulation.logtime 10^6

simulation.experiments 1

network.size 8

protocol.tr UniformRandomTransport # Implementa a camada de transporte confiável, com mensagens com delay rondomico baseado em distribuíção uniform
{
	mindelay 0
	maxdelay 0
}

protocol.my overlay.chord.ChordProtocol # protocolo onde o VCube será implementado. Aqui é provido a entrega de eventos. Temos aqui o processEvent que invoca o evento de entrega do protocolo.
{
	transport tr
}

control.traffic overlay.chord.TrafficGenerator #realiza envios e mensagens entre dois nodos sorteados e que estão ativos
{
	protocol my
	step 100
}

init.create overlay.chord.CreateNw #outro control, parece que cria tudo - tamanho da lista de sucessores
{
	protocol my
	idLength 128
	succListSize 5
}

control.observer overlay.chord.MessageCounterObserver
{
	protocol my
	step 90000
}

control.dnet DynamicNetwork
{
	add 20
	add -25
	minsize 3000
	maxsize 7000
	step 100000
	init.0 overlay.chord.ChordInitializer
	{      
		protocol my
	}
}
